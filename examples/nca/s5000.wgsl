const NUM_CHANNELS = 12u;

//const DATA_BUFFER_SIZE = u32(SCREEN_WIDTH) * u32(SCREEN_HEIGHT) * NUM_CHANNELS;
const DATA_BUFFER_SIZE = 40716288u; // 1280 * 720 * 12

#storage data_buffer array<f32,DATA_BUFFER_SIZE>

// Gold Noise function
const PHI: f32 = 1.61803398874989484820459; // Golden Ratio
const PI: f32  = 3.14159265358979323846264; // PI
const SRT: f32 = 1.41421356237309504880169; // Square Root of Two

fn rnd(coordinate: vec2<f32>, seed: f32) -> f32
{
    return fract(sin(dot(coordinate*seed, vec2<f32>(PHI * 0.1, PI * 0.1)))*SRT * 10000.0);
}

fn hash43(p: float3) -> float4 {
  var p4: float4 = fract(float4(p.xyzx)  * float4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

fn data_buffer_idx(x: u32, y: u32, c: u32) -> u32 {
    return c + (x + y * u32(SCREEN_WIDTH)) * NUM_CHANNELS;
}

fn data_buffer_read_c4(x: u32, y: u32, c: u32) -> float4 {
    let i = data_buffer_idx(x, y, c);
    return float4(data_buffer[i], data_buffer[i + 1u], data_buffer[i + 2u], data_buffer[i + 3u]);
}

fn data_buffer_write_c4(v: float4, x: u32, y: u32, c: u32) {
    let i = data_buffer_idx(x, y, c);
    data_buffer[i] = v[0];
    data_buffer[i+1u] = v[1];
    data_buffer[i+2u] = v[2];
    data_buffer[i+3u] = v[3];
}

fn data_buffer_read_12(x: u32, y: u32) -> array<f32, 12> {
    let idx = data_buffer_idx(x, y, 0u);
    var result: array<f32, 12>;

    for (var i = 0; i < 12; i = i + 1) {
        result[i] = data_buffer[i + i32(idx)];
    }

    return result;
}

fn data_buffer_write_12(x: u32, y: u32, _data: array<f32, 12>) {
    let idx = data_buffer_idx(x, y, 0u);
    var data = _data;

    for (var i = 0; i < 12; i = i + 1) {
        data_buffer[i + i32(idx)] = data[i];
    }
}

var<private> current_index: int2;

fn R(x: i32, y: i32, c: i32) -> float4 {
    return data_buffer_read_c4(u32(current_index.x + x + SCREEN_WIDTH) % u32(SCREEN_WIDTH), u32(current_index.y + y + SCREEN_HEIGHT) % u32(SCREEN_HEIGHT), u32(c));
}


fn F(yi: float4, a: array<float4, 4>, b: array<float4, 4>) -> float4 {
    return
        yi[0] * a[0] + abs(yi[0]) * b[0] +
        yi[1] * a[1] + abs(yi[1]) * b[1] +
        yi[2] * a[2] + abs(yi[2]) * b[2] +
        yi[3] * a[3] + abs(yi[3]) * b[3]
    ;
}

fn f4(x: i32, y: i32, z: i32, w: i32) -> float4 {
    return float4(f32(x), f32(y), f32(z), f32(w));
}

fn M(m0: i32, m1: i32, m2: i32, m3: i32,
    m4: i32, m5:i32, m6: i32, m7: i32,
    m8: i32, m9: i32, m10: i32, m11: i32,
    m12: i32, m13: i32, m14: i32, m15: i32) -> array<float4,4> {
        return array<float4,4>(
            float4(f32(m0), f32(m1), f32(m2), f32(m3)),
            float4(f32(m4), f32(m5), f32(m6), f32(m7)),
            float4(f32(m8), f32(m9), f32(m10), f32(m11)),
            float4(f32(m12), f32(m13), f32(m14), f32(m15)),
        );
    }



  fn updaten(_x: array<f32, 12>, _y: array<f32, 12>) -> array<f32, 12> {
    var weights = array<array<f32, 12>, 48>(
       array<f32, 12>(-0.08208451420068741, 0.0153756532818079, 0.00676283985376358, -0.021847642958164215, 0.034956227988004684, 0.016518166288733482, 0.014919063076376915, -0.04107898473739624, 0.018914595246315002, -0.01040979940444231, -0.004982244689017534, 0.0048730019479990005),
       array<f32, 12>(-0.008954256772994995, -0.059106115251779556, 0.010133116506040096, -0.03657784312963486, 0.01050938293337822, -0.00031818661955185235, 0.030884822830557823, -0.010421407409012318, 0.012245056219398975, -0.023764410987496376, -0.012295400723814964, 0.013457240536808968),
       array<f32, 12>(-0.0030203433707356453, 0.008385947905480862, -0.048371605575084686, -0.0036859135143458843, 0.005894400179386139, -0.0010957500198855996, -0.01821107603609562, 0.036545757204294205, 0.002408035332337022, -0.002686788560822606, -0.008502091281116009, -0.006285885814577341),
       array<f32, 12>(-0.009652415290474892, 0.011399226263165474, 0.011702161282300949, -0.1273420751094818, -0.0048902519047260284, 0.007606919389218092, -0.008470832370221615, -0.020497620105743408, 0.004104753956198692, -0.003321317955851555, 0.02142041176557541, -0.012858676724135876),
       array<f32, 12>(-0.018774954602122307, -0.0045680878683924675, 0.0028952322900295258, 0.02792290598154068, -0.13766984641551971, 0.0034686096478253603, -0.014060060493648052, 0.03277161344885826, -0.005204460583627224, -0.005888208746910095, -0.006523496937006712, 0.0671594962477684),
       array<f32, 12>(-0.0032394910231232643, 0.01539417915046215, -0.004041727632284164, -0.0011091833002865314, -0.003224366344511509, -0.10425408184528351, -0.020416583865880966, -0.01208535861223936, 0.0031330243218690157, 0.009869581088423729, 0.0005518803372979164, 0.01156671717762947),
       array<f32, 12>(0.012614365667104721, -0.0053199236281216145, 0.010699301958084106, -0.004773415625095367, 0.03566967695951462, 0.029393257573246956, -0.14218154549598694, 0.03672605752944946, -0.015010026283562183, -0.004144009202718735, -0.011888694018125534, 0.007292773574590683),
       array<f32, 12>(-0.014464347623288631, -0.022044487297534943, -0.01798071153461933, -0.0013438018504530191, -0.02851947210729122, 0.007403227034956217, -0.046871334314346313, -0.16217517852783203, 0.0036201998591423035, 0.012208466418087482, -0.0068409638479352, -0.028776872903108597),
       array<f32, 12>(-0.013213427737355232, 0.014225982129573822, 0.004371721763163805, 0.0015811400953680277, 0.015787454321980476, 0.023909583687782288, 0.02704588696360588, -0.013630514964461327, -0.12334999442100525, -0.01770835369825363, -0.011512731201946735, -0.010786143131554127),
       array<f32, 12>(-0.0025026395451277494, 0.00987792294472456, 0.0018808930180966854, 0.021974287927150726, -0.016918640583753586, 0.02049253135919571, 0.0073516229167580605, -0.01094643585383892, 0.032740384340286255, -0.13136732578277588, 0.027394121512770653, 0.009521822445094585),
       array<f32, 12>(0.006116996984928846, 0.003126971423625946, 0.022218063473701477, 0.018416738137602806, 0.002915293676778674, 0.018567945808172226, 0.010205300524830818, -0.013292442075908184, -0.004505686461925507, 0.0073569659143686295, -0.10359472036361694, -0.03744145482778549),
       array<f32, 12>(-0.031076591461896896, -0.0036320604849606752, -0.007109866477549076, 0.0015254314057528973, -0.026941359043121338, 0.0011865486158058047, 0.024622861295938492, 0.014150735922157764, 0.03894490748643875, -0.012439706362783909, 0.04520178958773613, -0.1361839920282364),
       array<f32, 12>(-0.0005194137338548899, -0.001918717985972762, 0.001175069366581738, -0.0034814798273146152, 0.003973851911723614, -0.00033867324236780405, 0.0021328350994735956, -0.006561127956956625, 0.004327250178903341, -0.001860703807324171, -0.0003936973516829312, -0.0036261084023863077),
       array<f32, 12>(0.0026401847135275602, 0.01337610837072134, 0.00121913047041744, -0.009678777307271957, 0.0017491619801148772, 0.005652428604662418, 0.003952577244490385, -0.0032663417514413595, 0.001251634326763451, 0.004801825154572725, -0.0041545662097632885, 0.0003648489073384553),
       array<f32, 12>(-0.07412251830101013, -0.0733422338962555, 0.0786595419049263, 0.010137028060853481, -0.003502711420878768, -0.032908011227846146, -0.013432650826871395, 0.025705022737383842, -0.02584017813205719, -0.029829956591129303, 0.02156004123389721, 0.008168630301952362),
       array<f32, 12>(-0.01678904891014099, -0.035250917077064514, 0.008959488943219185, 0.03174988180398941, 0.0031689642928540707, -0.01394355297088623, -0.0038669919595122337, 0.010898725129663944, -0.013937592506408691, -0.02772543393075466, 0.019321763888001442, 0.002204722259193659),
       array<f32, 12>(0.012987787835299969, 0.005853543523699045, -0.006953520234674215, -0.006437797099351883, 0.02348136343061924, 0.014907026663422585, 0.020439591258764267, 0.0007866842206567526, 0.005077911540865898, 0.015365314669907093, -0.02264701947569847, 0.01752256415784359),
       array<f32, 12>(-0.01118855457752943, -0.02108125202357769, -0.0006830451893620193, 0.004958277102559805, 0.016831563785672188, -0.0331246554851532, 0.005492089316248894, 0.014937667176127434, -0.01736072450876236, -0.00428709015250206, -0.019551677629351616, 0.004116967786103487),
       array<f32, 12>(-0.021024879068136215, -0.03692958503961563, 0.0051617855206131935, 0.0099998963996768, 0.011312137357890606, -0.013930948451161385, 0.01375330425798893, 0.035061195492744446, -0.02028384990990162, -0.00729571795091033, -0.00592261366546154, 0.02552221529185772),
       array<f32, 12>(0.007942481897771358, 0.0030699085909873247, -0.007262711878865957, -0.004925369285047054, 0.02697986178100109, 0.006733675021678209, 0.0165074672549963, -0.010948579758405685, -0.014254357665777206, 0.01257901731878519, -0.02672797255218029, 0.005220506805926561),
       array<f32, 12>(-0.0022991064470261335, -0.0020353184081614017, -0.0014189401408657432, 0.0004779806768056005, -0.002301465254276991, 9.827723988564685e-05, -0.0058707790449261665, 0.0007546555134467781, -0.04086173325777054, 0.03318243473768234, 0.021359877660870552, -0.002137065166607499),
       array<f32, 12>(0.02064679190516472, 0.03162362426519394, -0.006409064866602421, -0.00792989507317543, -0.02357649803161621, 0.0285121388733387, 0.02407737448811531, -0.03714146465063095, 0.041638098657131195, 0.045769885182380676, -0.00549518596380949, -0.008037162944674492),
       array<f32, 12>(-0.019326040521264076, -0.033597588539123535, 0.0049810269847512245, 0.022867171093821526, -0.018091915175318718, -0.00807830598205328, 0.019177164882421494, 0.015551823191344738, 0.011310454457998276, -0.0029775029979646206, 0.01168904546648264, 0.026383891701698303),
       array<f32, 12>(-0.00413960637524724, 0.002569690113887191, 0.004571730736643076, 0.00409594364464283, 0.007043913472443819, -0.039705291390419006, -0.016684869304299355, 0.004188824445009232, -0.02400391362607479, -0.0057047586888074875, 0.006580652203410864, -0.0293060764670372),
       array<f32, 12>(0.0018907183548435569, -0.009189719334244728, -0.0008660139865241945, 0.033257823437452316, 0.021544363349676132, 0.004674057010561228, 0.02911277487874031, 0.032093048095703125, 0.0030295755714178085, 0.0019282213179394603, -0.0009586440282873809, 0.04792251065373421),
       array<f32, 12>(-0.04396491125226021, 0.025698969140648842, -0.014073008671402931, 0.06332346796989441, 0.0469316728413105, 0.02060456946492195, 0.002879221923649311, 0.03129233047366142, -0.0033162108156830072, 0.010897019878029823, -0.01665167510509491, 0.07256730645895004),
       array<f32, 12>(-0.004823161289095879, -0.0045759486965835094, 0.03705479949712753, -0.005113932769745588, -0.0062196156941354275, -0.010795152746140957, 0.025627097114920616, -0.03105994500219822, -0.000999700278043747, 0.001466908142901957, 0.010301779955625534, 0.00017719010065775365),
       array<f32, 12>(0.0008340718341059983, 0.0043416148982942104, 0.009233502671122551, -0.05200117081403732, -0.005647503770887852, 0.009075382724404335, -0.003684062510728836, 0.027482671663165092, 0.002788710407912731, -0.017223991453647614, 0.030512310564517975, -0.04895799234509468),
       array<f32, 12>(-0.008044428192079067, -0.01609981618821621, -0.024601120501756668, -0.048092786222696304, 0.0400494709610939, -0.019298648461699486, -0.007421710062772036, 0.02107447013258934, -0.04653540626168251, -0.006617382634431124, -0.03574100881814957, 0.03793454170227051),
       array<f32, 12>(-0.010572612285614014, 0.0006284181727096438, 0.00813745055347681, -0.001626214594580233, 0.009279157966375351, 0.02728687785565853, 0.016490701586008072, 0.017483368515968323, -0.011281353421509266, -0.05206812545657158, 0.010362589731812477, 0.02816280908882618),
       array<f32, 12>(0.00758565217256546, 0.004003016743808985, -0.0027677216567099094, -0.003299505915492773, -0.01247220579534769, 0.015966150909662247, 0.05018676444888115, -0.0013969885185360909, 0.02074572816491127, -0.027403026819229126, -0.016411496326327324, 0.016901101917028427),
       array<f32, 12>(0.041308894753456116, 0.029205892235040665, 0.02216186374425888, 0.0774996355175972, -0.013888923451304436, 0.010056288912892342, -0.007323776371777058, 0.0074269408360123634, 0.00880618765950203, -0.013768543489277363, 0.03736775368452072, -0.030983267351984978),
       array<f32, 12>(-0.008214820176362991, -0.008170677348971367, -0.003428346710279584, -0.0015647312393411994, 0.02329215034842491, -0.01870507374405861, -0.027485905215144157, 0.02017020992934704, -0.0006359193357639015, 0.016248095780611038, -0.03369924798607826, 0.026409663259983063),
       array<f32, 12>(-0.00022530206479132175, -0.001043476164340973, 0.0038085465785115957, 0.013516372069716454, -0.014992463402450085, 0.0016465605003759265, 0.01953318528831005, -0.006127563770860434, -0.021865567192435265, -0.006687274668365717, 0.006454999092966318, -0.002515579806640744),
       array<f32, 12>(0.006165287923067808, 0.006469305604696274, -0.001577122020535171, -0.022286226972937584, 0.008572863414883614, -0.03457421064376831, -0.03291073441505432, 0.01572960428893566, -0.010367797687649727, -0.01417755801230669, -0.03336435928940773, 0.028292208909988403),
       array<f32, 12>(-0.007853077724575996, 0.02389722876250744, 0.023096073418855667, -0.0010961289517581463, -0.047527652233839035, -0.050058770924806595, -0.006895883474498987, 0.025570636615157127, 0.004843019414693117, 0.04491742327809334, 0.003310613567009568, 0.010310363955795765),
       array<f32, 12>(0.0011697402223944664, 0.003349276725202799, -0.0004135181079618633, -0.0016793247777968645, 0.0010084633249789476, 0.0011084673460572958, -0.0042467257007956505, 0.0014641026500612497, -0.0028696588706225157, 0.002800913993269205, 0.0003848067135550082, 0.0005614631809294224),
       array<f32, 12>(0.00025821305462159216, -0.006698594428598881, -0.0003593134169932455, 0.005094871856272221, -0.007424885872751474, -0.004555108025670052, 0.004236772656440735, 0.002808638848364353, 0.006652467884123325, -0.004482724238187075, 0.00037944840732961893, -0.003017070470377803),
       array<f32, 12>(-0.060902126133441925, -0.041237812489271164, -0.022075176239013672, -0.05782375484704971, -0.03535665199160576, 0.017201166599988937, 0.023487037047743797, 0.019146259874105453, 0.003598840907216072, 0.026931587606668472, -0.021065430715680122, 0.03353073447942734),
       array<f32, 12>(-0.008122959174215794, -0.0068983291275799274, 0.0021217530593276024, -0.013942948542535305, 0.018792953342199326, 0.004910216201096773, -0.008329114876687527, 0.020250679925084114, -0.032954152673482895, 0.009247759357094765, 0.002830466255545616, -0.0003405573370400816),
       array<f32, 12>(0.0171275082975626, 0.023084254935383797, -0.002617507940158248, 0.006326958071440458, -0.0018096155254170299, 0.01328297145664692, -0.002957375254482031, -0.0225163996219635, 0.00971735455095768, -0.0019909702241420746, 0.01204875111579895, -0.007240867707878351),
       array<f32, 12>(0.004613555036485195, 0.007597902789711952, 0.002763153053820133, 0.00740100396797061, -0.005872087087482214, -0.006674002856016159, -0.010930468328297138, -0.011773751117289066, -0.0011083506979048252, 0.034860000014305115, -0.00295393168926239, -0.004841252230107784),
       array<f32, 12>(0.005566958338022232, 0.0015347518492490053, -0.0033541566226631403, 0.004965297877788544, 0.013122063130140305, 0.01444681640714407, 0.004902730230242014, -0.013763327151536942, -0.004973177332431078, -0.005112836603075266, -0.002875332487747073, -0.005418080370873213),
       array<f32, 12>(0.006956797093153, 0.013095254078507423, -0.0002735489106271416, -0.01083326991647482, -0.003397488035261631, 0.005915867630392313, 0.008856197819113731, -0.012127742171287537, 0.016206655651330948, 0.018423613160848618, -0.010598861612379551, -0.006276239175349474),
       array<f32, 12>(-0.008838891983032227, -0.0035926837008446455, 0.004314459394663572, -0.006558002904057503, 0.004948358051478863, -0.0173149686306715, -0.015486002899706364, 0.008737465366721153, -0.02106018178164959, 0.00920410268008709, -0.0011471558827906847, -0.016175303608179092),
       array<f32, 12>(-0.003964132629334927, 0.0033748475834727287, 0.0030469202902168036, 0.003976292908191681, -0.0010434711584821343, -0.010062215849757195, -0.005058174021542072, 0.0029482273384928703, 0.007167214993387461, -0.020810304209589958, 0.00933409295976162, -0.02002750150859356),
       array<f32, 12>(0.008999762125313282, 0.012826642952859402, -0.0022121411748230457, 0.0021997839212417603, 0.000512485159561038, 0.01083639170974493, 0.004575673490762711, -0.023861365392804146, 0.011133043095469475, 0.006575870327651501, 0.0030682787764817476, -0.01576937362551689),
       array<f32, 12>(0.006161435041576624, -0.003059027949348092, -0.0005305855302140117, 0.0157400444149971, -0.00013745605247095227, 0.004579470027238131, -0.040515776723623276, -0.016065115109086037, 0.007078200113028288, -0.011174901388585567, 0.016914749518036842, 5.6084332754835486e-05)
    );

var bias = array<f32, 12>(-0.019706757739186287, -0.02319108135998249, -0.03833088278770447, -0.030872883275151253, 0.002665857318788767, -0.006866509094834328, 0.010377898812294006, -0.020979421213269234, -0.027912314981222153, -0.02213473990559578, -0.01712382771074772, -0.011304153129458427);
    var x = _x;
    var y = _y;

    var result: array<f32, 12>;
    var features: array<f32, 48>;

    for (var i = 0; i < 12; i = i + 1) {
        features[i] = x[i];
        features[i + 12] = y[i];
        features[i + 24] = abs(x[i]);
        features[i + 36] = abs(y[i]);
    }

    for (var i = 0; i < 12; i = i + 1) {
      var s: f32 = 0.0;
      for (var j = 0; j < 48; j = j + 1) {
        s += features[j] * f32(weights[j][i]);
      }

      result[i] = (s + f32(bias[i])) / 1.0;
    }

    return result;
  }
fn f_mod(x: f32, y: f32) -> f32
{
  return x - y * floor(x/y);
}

@compute @workgroup_size(16, 16)
fn main_image(@builtin(global_invocation_id) id: uint3) {
    let screen_size = uint2(textureDimensions(screen));
    if (id.x >= screen_size.x || id.y >= screen_size.y) {
        let dx0 = vec4f(1.0, 0.0, 0.0, 1.0);
        textureStore(
            screen,
            int2(id.xy),
            dx0
        );
        return;
    }

    current_index = int2(int(id.x), int(id.y));

    if (time.frame == 0u) {
        // for (var i = 0u; i < NUM_CHANNELS / 4u; i = i+1u) {
        //     let noise = hash43(float3(f32(id.x + i * u32(SCREEN_WIDTH)), f32(id.y), 0.0)) - 0.5;

        //     data_buffer[data_buffer_idx(id.x, id.y, i * 4u +0u)] = noise.x;
        //     data_buffer[data_buffer_idx(id.x, id.y, i * 4u + 1u)] = noise.y;
        //     data_buffer[data_buffer_idx(id.x, id.y, i * 4u + 2u)] = noise.z;
        //     data_buffer[data_buffer_idx(id.x, id.y, i * 4u + 3u)] = noise.w;
        // }
        for (var i = 0u; i < NUM_CHANNELS; i = i+1u) {
            let noise = rnd(vec2<f32>(f32(id.x) / f32(SCREEN_WIDTH), f32(id.y) / f32(SCREEN_HEIGHT)), f32(i) * 1337.37);
            // let noise = hash43(float3(f32(id.x + i * u32(SCREEN_WIDTH)), f32(id.y), 0.0)) - 0.5;

            data_buffer[data_buffer_idx(id.x, id.y, i)] = noise;
        }
    }

    // 2
    let vert_sobel = R(-1, 1, 8) + R(-1, 0, 8)*2.0 + R(-1,-1, 8)
                    -R( 1, 1, 8) - R( 1, 0, 8)*2.0 - R( 1,-1, 8);
    // 1
    let hor_sobel = R( 1, 1, 4)+R( 0, 1, 4)*2.0+R(-1, 1, 4)
                   -R( 1,-1, 4)-R( 0,-1, 4)*2.0-R(-1,-1, 4);

    // 0
    var lap = R(1,1, 0)+R(1,-1, 0)+R(-1,1, 0)+R(-1,-1, 0)
              +2.0*(R(0,1, 0)+R(0,-1, 0)+R(1,0, 0)+R(-1,0, 0))- 12.0*R(0, 0, 0);

    var xs = data_buffer_read_12(id.x, id.y);

    var ys = array<f32, 12>(
        lap.x,
        lap.y,
        lap.z,
        lap.w,
        hor_sobel.x,
        hor_sobel.y,
        hor_sobel.z,
        hor_sobel.w,
        vert_sobel.x,
        vert_sobel.y,
        vert_sobel.z,
        vert_sobel.w,
    );

    let clamp_low = -1.5;
    let clamp_high = 1.5;

    var u = updaten(xs, ys);

     for (var i = 0; i < 12; i = i + 1) {
        xs[i] = xs[i] + u[i];
     }

    let pos = vec2<f32>(f32(id.x) / f32(SCREEN_WIDTH), f32(id.y) / f32(SCREEN_HEIGHT));

    let cy = -pos.x + 1.337 * (1.5 - f_mod(f32(time.frame) * 0.001, 1.5));
    // * abs(sin(f32(time.frame) * 0.001));

    let rg = rnd(vec2<f32>(f32(id.x) / f32(SCREEN_WIDTH), f32(id.y) / f32(SCREEN_HEIGHT)), f32(time.frame) * 1337.37);

    let distort = abs(pos.y - cy) < 0.05;
    if (distort && rg > 0.5) {
        for (var i = 0; i < 12; i = i + 1) {
            let noise = rnd(vec2<f32>(f32(id.x) / f32(SCREEN_WIDTH), f32(id.y) / f32(SCREEN_HEIGHT)), f32((time.frame % 253u) * u32(i)) * 13333.37);
            xs[i] = 0.8 * xs[i] + 0.2 * noise;
        }

        // dx0.x = 0.0;
        // dx0.y = 0.0;
        // dx0.z = 0.0;
    }

    data_buffer_write_12(id.x, id.y, xs);

    let cl = 0.0;

    var dx0 = float4(
        clamp(xs[0] + 0.5, cl, 1.0),
        clamp(xs[1] + 0.5, cl, 1.0),
        clamp(xs[2] + 0.5, cl, 1.0),
        clamp(xs[3] + 0.5, cl, 1.0)
    );


    if (distort) {
        dx0.x = 1.0;
        // dx0.y = 0.0;

    } else {
        dx0.x = 0.0;
        dx0.z = dx0.z * 1.2;
        //dx0.x = clamp(dx0.x, 0.0, 0.05);
    }

    textureStore(
        screen,
        int2(id.xy),
        dx0
    );
}
